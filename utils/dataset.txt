import torch
import torchvision.transforms as transforms
import os
import nltk
from PIL import Image
from torch.utils.data import Dataset, DataLoader
from pycocotools.coco import COCO
import numpy as np

nltk.download('punkt')

class COCODataset(Dataset):
    def __init__(self, image_dir, caption_path, vocab, transform=None):
        self.image_dir = image_dir
        self.coco = COCO(caption_path)
        self.ids = list(self.coco.anns.keys())
        self.vocab = vocab
        self.transform = transform

    def __getitem__(self, index):
        ann_id = self.ids[index]
        caption = self.coco.anns[ann_id]['caption']
        img_id = self.coco.anns[ann_id]['image_id']
        path = self.coco.loadImgs(img_id)[0]['file_name']

        image = Image.open(os.path.join(self.image_dir, path)).convert('RGB')

        if self.transform is not None:
            image = self.transform(image)

        tokens = nltk.tokenize.word_tokenize(str(caption).lower())
        caption_ids = []
        caption_ids.append(self.vocab('<start>'))
        caption_ids.extend([self.vocab(token) for token in tokens])
        caption_ids.append(self.vocab('<end>'))
        target = torch.Tensor(caption_ids)

        return image, target

    def __len__(self):
        return len(self.ids)

def collate_fn(data):
    data.sort(key=lambda x: len(x[1]), reverse=True)
    images, captions = zip(*data)

    images = torch.stack(images, 0)

    lengths = [len(cap) for cap in captions]
    targets = torch.zeros(len(captions), max(lengths)).long()

    for i, cap in enumerate(captions):
        end = lengths[i]
        targets[i, :end] = cap[:end]

    return images, targets, lengths

def get_loader(image_dir, caption_path, vocab, transform, batch_size, shuffle=True):
    coco = COCODataset(image_dir=image_dir, caption_path=caption_path, vocab=vocab, transform=transform)
    data_loader = DataLoader(dataset=coco,
                             batch_size=batch_size,
                             shuffle=shuffle,
                             num_workers=2,
                             collate_fn=collate_fn)
    return data_loader
